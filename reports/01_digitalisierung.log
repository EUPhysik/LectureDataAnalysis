Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.7.10/x64/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/opt/hostedtoolcache/Python/3.7.10/x64/lib/python3.7/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.7.10/x64/lib/python3.7/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.7.10/x64/lib/python3.7/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.7.10/x64/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.7.10/x64/lib/python3.7/site-packages/nbclient/client.py", line 554, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/opt/hostedtoolcache/Python/3.7.10/x64/lib/python3.7/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/hostedtoolcache/Python/3.7.10/x64/lib/python3.7/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import matplotlib as mpl
mpl.rcParams['figure.dpi'] = 400

import matplotlib.pyplot as plt

import numpy as np
import seaborn as sns
sns.set()
#sns.set(style="whitegrid")
sns.set_style('ticks')
sns.set_context("notebook", font_scale=1.5, rc={"lines.linewidth": 2.5})

#plt.style.use("seaborn-notebook")

nt = 100
t_p = np.linspace(0, 1, nt)

f_up = 1 - np.exp(-t_p*10)
f_down = np.exp(-t_p*10)

def create_signal(s):
    t_global = np.zeros(len(s)*nt)
    s_global = np.zeros_like(t_global)
    t_global[0:nt] = t_p
    s_global[0:nt] = s[0]
    for i in range(1,len(s)):
        t_global[nt*i:nt*(i+1)] = t_p + i
        if s[i] == 0:
            if s[i-1] == 1:
                s_global[nt*i:nt*(i+1)] = f_down
            else:
                s_global[nt*i:nt*(i+1)] = 0
        if s[i] == 1:
            if s[i-1] == 0:
                s_global[nt*i:nt*(i+1)] = f_up
            else:
                s_global[nt*i:nt*(i+1)] = 1    
    # t_global[-nt:] = t_p + len(s)
    # s_global[-nt:] = s[-1]
    return t_global, s_global

s = [0, 1, 1, 0, 1, 0, 1, 0]
c = [0, 1, 0, 1, 0, 1, 0, 1]

t_global, s_global = create_signal(s)
t_global, c_global = create_signal(c)

s_global += (0.5 - np.random.random(len(s_global)))*2 * 0.015
c_global += (0.5 - np.random.random(len(c_global)))*2 * 0.015

plt.plot(t_global, s_global, label='analog')
# plt.scatter(td, fd, label='digital', color="C1")
plt.xlabel("Zeit / Ort")
plt.ylabel("Zustandssignal")

sns.despine()


xmajor_ticks = np.arange(0, len(s)+2, 1)
xminor_ticks = np.arange(0, len(s)+2, 1)
ymajor_ticks = np.arange(0, 2, 1)
yminor_ticks = np.arange(0, 2, 1)

ax = plt.gca()

ax.set_xticks(xmajor_ticks)
ax.set_xticks(xminor_ticks, minor=True)
ax.set_yticks(ymajor_ticks)
ax.set_yticks(yminor_ticks, minor=True)

one = np.ones_like(t_global)
plt.fill_between(t_global, 0.9*one, 1.1*one, alpha=0.2, color="C2")
plt.fill_between(t_global, -0.1*one, 0.1*one, alpha=0.2, color="C2")

plt.xticks([])

plt.tight_layout()
plt.grid(which='both')
# plt.legend()
plt.savefig('./bilder/digital_state.png')
# plt.show()
# plt.clf()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-6ec551452279>[0m in [0;36m<module>[0;34m[0m
[1;32m      5[0m [0;34m[0m[0m
[1;32m      6[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 7[0;31m [0;32mimport[0m [0mseaborn[0m [0;32mas[0m [0msns[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      8[0m [0msns[0m[0;34m.[0m[0mset[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      9[0m [0;31m#sns.set(style="whitegrid")[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'seaborn'
ModuleNotFoundError: No module named 'seaborn'

